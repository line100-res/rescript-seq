// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Seq_Core = require("./Seq_Core.bs.js");

var Err = Seq_Core.Err;

var unwrap = Seq_Core.unwrap;

var force = Seq_Core.force;

var car = Seq_Core.car;

var cdr = Seq_Core.cdr;

var next = Seq_Core.next;

var cons = Seq_Core.cons;

var consWait = Seq_Core.consWait;

var consMapTail = Seq_Core.consMapTail;

var lazyConsMapTail = Seq_Core.lazyConsMapTail;

var consMap = Seq_Core.consMap;

var lazyConsMap = Seq_Core.lazyConsMap;

var make = Seq_Core.make;

var isEmpty = Seq_Core.isEmpty;

var equal = Seq_Core.equal;

var match = Seq_Core.match;

var every = Seq_Core.every;

var map = Seq_Core.map;

var lazyMap = Seq_Core.lazyMap;

var append = Seq_Core.append;

var merge = Seq_Core.merge;

var forceMerge = Seq_Core.forceMerge;

var countForced = Seq_Core.countForced;

var take = Seq_Core.take;

var lazyTake = Seq_Core.lazyTake;

var takeWhile = Seq_Core.takeWhile;

var lazyTakeWhile = Seq_Core.lazyTakeWhile;

var drop = Seq_Core.drop;

var dropWhile = Seq_Core.dropWhile;

var fromList = Seq_Core.fromList;

var fromArrayInPlace = Seq_Core.fromArrayInPlace;

var fromArray = Seq_Core.fromArray;

var fromString = Seq_Core.fromString;

var Slice;

exports.Err = Err;
exports.unwrap = unwrap;
exports.force = force;
exports.car = car;
exports.cdr = cdr;
exports.next = next;
exports.cons = cons;
exports.consWait = consWait;
exports.consMapTail = consMapTail;
exports.lazyConsMapTail = lazyConsMapTail;
exports.consMap = consMap;
exports.lazyConsMap = lazyConsMap;
exports.make = make;
exports.isEmpty = isEmpty;
exports.equal = equal;
exports.match = match;
exports.every = every;
exports.map = map;
exports.lazyMap = lazyMap;
exports.append = append;
exports.merge = merge;
exports.forceMerge = forceMerge;
exports.countForced = countForced;
exports.take = take;
exports.lazyTake = lazyTake;
exports.takeWhile = takeWhile;
exports.lazyTakeWhile = lazyTakeWhile;
exports.drop = drop;
exports.dropWhile = dropWhile;
exports.fromList = fromList;
exports.fromArrayInPlace = fromArrayInPlace;
exports.fromArray = fromArray;
exports.fromString = fromString;
exports.Slice = Slice;
/* No side effect */
