// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Seq = require("./Seq.bs.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");

var Err = /* @__PURE__ */Caml_exceptions.create("Slice.Err");

function car(slice) {
  var seq = slice[1];
  if (seq) {
    return Seq.car(seq._0);
  }
  throw {
        RE_EXN_ID: Err,
        _1: "unexpected slice, which is Nil.",
        Error: new Error()
      };
}

function cdr(slice) {
  var len = slice[0];
  if (len === 0) {
    throw {
          RE_EXN_ID: Err,
          _1: "unexpected slice, which is 0 length.",
          Error: new Error()
        };
  }
  var seq = slice[1];
  if (seq) {
    return [
            len - 1 | 0,
            Seq.cdr(seq._0)
          ];
  }
  throw {
        RE_EXN_ID: Err,
        _1: "unexpected slice, which is Nil.",
        Error: new Error()
      };
}

function toSeq(slice) {
  return Seq.take(slice[1], slice[0]);
}

function toLazySeq(slice) {
  return Seq.lazyTake(slice[1], slice[0]);
}

function seqSplitUnsafe(seq, n) {
  return [
          [
            n,
            seq
          ],
          Seq.drop(seq, n)
        ];
}

function seqSplitWhile(seq, test) {
  var match = Seq.dropWhile(seq, test);
  return [
          [
            match[0],
            seq
          ],
          match[1]
        ];
}

exports.Err = Err;
exports.car = car;
exports.cdr = cdr;
exports.toSeq = toSeq;
exports.toLazySeq = toLazySeq;
exports.seqSplitUnsafe = seqSplitUnsafe;
exports.seqSplitWhile = seqSplitWhile;
/* No side effect */
