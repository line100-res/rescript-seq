// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Seq = require("../src/Seq.bs.js");
var Test = require("rescript-test/src/Test.bs.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var TestUtils = require("./TestUtils.bs.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");

var Err = /* @__PURE__ */Caml_exceptions.create("Seq_test.Err");

function unwrap(opt, err) {
  if (opt !== undefined) {
    return Caml_option.valFromOption(opt);
  }
  throw err;
}

function createCharSeq(str) {
  var gen = function (index) {
    var c = str.charAt(index);
    if (c === "") {
      return /* Nil */0;
    } else {
      return Seq.make((function (param) {
                    return gen(index + 1 | 0);
                  }), c);
    }
  };
  return unwrap(gen(0), {
              RE_EXN_ID: Err,
              _1: "createCharSeq: unexpected"
            });
}

Test.test("test seq of 'abc'", (function (param) {
        var seq = createCharSeq("abc");
        if (!seq) {
          return Test.fail("first is nil", undefined);
        }
        var c = seq._0;
        var first = Seq.car(c);
        var seq$1 = Seq.cdr(c);
        TestUtils.stringEqual("first is a", first, "a");
        if (seq$1 === undefined) {
          return Test.fail("second is nil", undefined);
        }
        if (!seq$1) {
          return Test.fail("second is nil", undefined);
        }
        var c$1 = seq$1._0;
        var second = Seq.car(c$1);
        var seq$2 = Seq.cdr(c$1);
        TestUtils.stringEqual("second is b", second, "b");
        if (seq$2 === undefined) {
          return Test.fail("third is nil", undefined);
        }
        if (!seq$2) {
          return Test.fail("third is nil", undefined);
        }
        var c$2 = seq$2._0;
        var second$1 = Seq.car(c$2);
        var seq$3 = Seq.cdr(c$2);
        TestUtils.stringEqual("third is c", second$1, "c");
        return Test.assertion("seq should end", undefined, Caml_obj.caml_equal, seq$3, /* Nil */0);
      }));

Test.test("test seq match", (function (param) {
        var seq = createCharSeq("abc");
        TestUtils.seqEqual("seq match should be 3", seq, {
              hd: "a",
              tl: {
                hd: "b",
                tl: {
                  hd: "c",
                  tl: /* [] */0
                }
              }
            });
        var arr = Seq.fromArrayInPlace([
              "a",
              "b",
              "c"
            ]);
        TestUtils.seqEqual("array inplace seq match should be 3", arr, {
              hd: "a",
              tl: {
                hd: "b",
                tl: {
                  hd: "c",
                  tl: /* [] */0
                }
              }
            });
        var arr$1 = Seq.fromArray([
              "a",
              "b",
              "c"
            ]);
        return TestUtils.seqEqual("array seq match should be 3", arr$1, {
                    hd: "a",
                    tl: {
                      hd: "b",
                      tl: {
                        hd: "c",
                        tl: /* [] */0
                      }
                    }
                  });
      }));

Test.test("infinit seq", (function (param) {
        var createInfinitSeq = function (i) {
          return Seq.cons(i, {
                      TAG: /* Lazy */1,
                      _0: (function (param) {
                          return createInfinitSeq(i + 1 | 0);
                        })
                    });
        };
        var seq = createInfinitSeq(0);
        var first3 = Seq.take(seq, 3);
        return TestUtils.seqEqual("get first 3 from infinit list", first3, {
                    hd: 0,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 2,
                        tl: /* [] */0
                      }
                    }
                  });
      }));

exports.Err = Err;
exports.unwrap = unwrap;
exports.createCharSeq = createCharSeq;
/*  Not a pure module */
